// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dashboard/test/unit/data/datasources/okx_api_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crypto_dashboard/core/network/network_client.dart' as _i5;
import 'package:crypto_dashboard/core/network/network_info.dart' as _i2;
import 'package:crypto_dashboard/core/network/offline_detector.dart' as _i8;
import 'package:crypto_dashboard/core/network/offline_manager.dart' as _i6;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkConnectionInfo_0 extends _i1.SmartFake
    implements _i2.NetworkConnectionInfo {
  _FakeNetworkConnectionInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1<T1> extends _i1.SmartFake implements _i3.Response<T1> {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Stream<_i2.NetworkConnectionInfo> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i4.Stream<_i2.NetworkConnectionInfo>.empty(),
          )
          as _i4.Stream<_i2.NetworkConnectionInfo>);

  @override
  _i4.Future<bool> hasInternetAccess() =>
      (super.noSuchMethod(
            Invocation.method(#hasInternetAccess, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.NetworkConnectionInfo> getConnectionInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionInfo, []),
            returnValue: _i4.Future<_i2.NetworkConnectionInfo>.value(
              _FakeNetworkConnectionInfo_0(
                this,
                Invocation.method(#getConnectionInfo, []),
              ),
            ),
          )
          as _i4.Future<_i2.NetworkConnectionInfo>);

  @override
  _i4.Future<Duration?> measureLatency() =>
      (super.noSuchMethod(
            Invocation.method(#measureLatency, []),
            returnValue: _i4.Future<Duration?>.value(),
          )
          as _i4.Future<Duration?>);

  @override
  void startMonitoring() => super.noSuchMethod(
    Invocation.method(#startMonitoring, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopMonitoring() => super.noSuchMethod(
    Invocation.method(#stopMonitoring, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NetworkClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkClient extends _i1.Mock implements _i5.NetworkClient {
  MockNetworkClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.NetworkClientEvent> get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: _i4.Stream<_i5.NetworkClientEvent>.empty(),
          )
          as _i4.Stream<_i5.NetworkClientEvent>);

  @override
  _i4.Future<bool> get isNetworkAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#isNetworkAvailable),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i3.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i5.NetworkClientConfig? config,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #config: config,
              },
            ),
            returnValue: _i4.Future<_i3.Response<T>>.value(
              _FakeResponse_1<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #config: config,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i3.Response<T>>);

  @override
  _i4.Future<_i3.Response<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i5.NetworkClientConfig? config,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #config: config,
              },
            ),
            returnValue: _i4.Future<_i3.Response<T>>.value(
              _FakeResponse_1<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #config: config,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i3.Response<T>>);

  @override
  _i4.Future<_i3.Response<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i5.NetworkClientConfig? config,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #config: config,
              },
            ),
            returnValue: _i4.Future<_i3.Response<T>>.value(
              _FakeResponse_1<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #config: config,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i3.Response<T>>);

  @override
  _i4.Future<_i3.Response<T>> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i5.NetworkClientConfig? config,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #config: config,
              },
            ),
            returnValue: _i4.Future<_i3.Response<T>>.value(
              _FakeResponse_1<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #config: config,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i3.Response<T>>);

  @override
  _i4.Future<_i2.NetworkConnectionInfo> getConnectionInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionInfo, []),
            returnValue: _i4.Future<_i2.NetworkConnectionInfo>.value(
              _FakeNetworkConnectionInfo_0(
                this,
                Invocation.method(#getConnectionInfo, []),
              ),
            ),
          )
          as _i4.Future<_i2.NetworkConnectionInfo>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [OfflineManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineManager extends _i1.Mock implements _i6.OfflineManager {
  MockOfflineManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);

  @override
  _i4.Stream<_i6.OfflineState> get onOfflineStateChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onOfflineStateChanged),
            returnValue: _i4.Stream<_i6.OfflineState>.empty(),
          )
          as _i4.Stream<_i6.OfflineState>);

  @override
  _i4.Future<void> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool shouldShowOfflineIndicator() =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowOfflineIndicator, []),
            returnValue: false,
          )
          as bool);

  @override
  String getOfflineMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineMessage, []),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getOfflineMessage, []),
            ),
          )
          as String);

  @override
  bool shouldUseCachedData() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUseCachedData, []),
            returnValue: false,
          )
          as bool);

  @override
  bool shouldQueueOperation() =>
      (super.noSuchMethod(
            Invocation.method(#shouldQueueOperation, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.OfflineRetryStrategy getRetryStrategy() =>
      (super.noSuchMethod(
            Invocation.method(#getRetryStrategy, []),
            returnValue: _i6.OfflineRetryStrategy.immediate,
          )
          as _i6.OfflineRetryStrategy);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [OfflineDetector].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineDetector extends _i1.Mock implements _i8.OfflineDetector {
  MockOfflineDetector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i8.OfflineDetectionEvent> get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: _i4.Stream<_i8.OfflineDetectionEvent>.empty(),
          )
          as _i4.Stream<_i8.OfflineDetectionEvent>);

  @override
  int get failureCount =>
      (super.noSuchMethod(Invocation.getter(#failureCount), returnValue: 0)
          as int);

  @override
  bool get isMonitoring =>
      (super.noSuchMethod(Invocation.getter(#isMonitoring), returnValue: false)
          as bool);

  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);

  @override
  void startDetection() => super.noSuchMethod(
    Invocation.method(#startDetection, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopDetection() => super.noSuchMethod(
    Invocation.method(#stopDetection, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<bool> forceCheck() =>
      (super.noSuchMethod(
            Invocation.method(#forceCheck, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  bool shouldShowOfflineWarning() =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowOfflineWarning, []),
            returnValue: false,
          )
          as bool);

  @override
  String getOfflineMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineMessage, []),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getOfflineMessage, []),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

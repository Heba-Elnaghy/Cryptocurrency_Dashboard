// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dashboard/test/unit/data/repositories/repository_resource_cleanup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crypto_dashboard/core/error/error_handling.dart' as _i4;
import 'package:crypto_dashboard/core/network/network.dart' as _i3;
import 'package:crypto_dashboard/data/datasources/okx_api_service.dart' as _i6;
import 'package:crypto_dashboard/data/models/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOKXInstrumentResponse_0 extends _i1.SmartFake
    implements _i2.OKXInstrumentResponse {
  _FakeOKXInstrumentResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOKXTickerResponse_1 extends _i1.SmartFake
    implements _i2.OKXTickerResponse {
  _FakeOKXTickerResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkConnectionInfo_2 extends _i1.SmartFake
    implements _i3.NetworkConnectionInfo {
  _FakeNetworkConnectionInfo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFailure_3 extends _i1.SmartFake implements _i4.Failure {
  _FakeFailure_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_4 extends _i1.SmartFake implements Duration {
  _FakeDuration_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRetryConfig_5 extends _i1.SmartFake implements _i4.RetryConfig {
  _FakeRetryConfig_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_6<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkOperationResult_7<T1> extends _i1.SmartFake
    implements _i3.NetworkOperationResult<T1> {
  _FakeNetworkOperationResult_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkRetryConfig_8 extends _i1.SmartFake
    implements _i3.NetworkRetryConfig {
  _FakeNetworkRetryConfig_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [OKXApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOKXApiService extends _i1.Mock implements _i6.OKXApiService {
  MockOKXApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isNetworkAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#isNetworkAvailable),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Stream<_i3.NetworkClientEvent> get networkEvents =>
      (super.noSuchMethod(
            Invocation.getter(#networkEvents),
            returnValue: _i5.Stream<_i3.NetworkClientEvent>.empty(),
          )
          as _i5.Stream<_i3.NetworkClientEvent>);

  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);

  @override
  String get offlineMessage =>
      (super.noSuchMethod(
            Invocation.getter(#offlineMessage),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#offlineMessage),
            ),
          )
          as String);

  @override
  bool get shouldUseCachedData =>
      (super.noSuchMethod(
            Invocation.getter(#shouldUseCachedData),
            returnValue: false,
          )
          as bool);

  @override
  _i3.OfflineRetryStrategy get retryStrategy =>
      (super.noSuchMethod(
            Invocation.getter(#retryStrategy),
            returnValue: _i3.OfflineRetryStrategy.immediate,
          )
          as _i3.OfflineRetryStrategy);

  @override
  _i5.Future<_i2.OKXInstrumentResponse> getInstruments() =>
      (super.noSuchMethod(
            Invocation.method(#getInstruments, []),
            returnValue: _i5.Future<_i2.OKXInstrumentResponse>.value(
              _FakeOKXInstrumentResponse_0(
                this,
                Invocation.method(#getInstruments, []),
              ),
            ),
          )
          as _i5.Future<_i2.OKXInstrumentResponse>);

  @override
  _i5.Future<_i2.OKXTickerResponse> getTickers() =>
      (super.noSuchMethod(
            Invocation.method(#getTickers, []),
            returnValue: _i5.Future<_i2.OKXTickerResponse>.value(
              _FakeOKXTickerResponse_1(
                this,
                Invocation.method(#getTickers, []),
              ),
            ),
          )
          as _i5.Future<_i2.OKXTickerResponse>);

  @override
  _i5.Future<_i2.OKXTickerResponse> getTickersForInstruments(
    List<String>? instIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTickersForInstruments, [instIds]),
            returnValue: _i5.Future<_i2.OKXTickerResponse>.value(
              _FakeOKXTickerResponse_1(
                this,
                Invocation.method(#getTickersForInstruments, [instIds]),
              ),
            ),
          )
          as _i5.Future<_i2.OKXTickerResponse>);

  @override
  _i5.Future<_i2.OKXTickerResponse> getSupportedCryptoTickers() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedCryptoTickers, []),
            returnValue: _i5.Future<_i2.OKXTickerResponse>.value(
              _FakeOKXTickerResponse_1(
                this,
                Invocation.method(#getSupportedCryptoTickers, []),
              ),
            ),
          )
          as _i5.Future<_i2.OKXTickerResponse>);

  @override
  _i5.Future<_i3.NetworkConnectionInfo> getConnectionInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionInfo, []),
            returnValue: _i5.Future<_i3.NetworkConnectionInfo>.value(
              _FakeNetworkConnectionInfo_2(
                this,
                Invocation.method(#getConnectionInfo, []),
              ),
            ),
          )
          as _i5.Future<_i3.NetworkConnectionInfo>);

  @override
  _i5.Future<void> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NetworkErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkErrorHandler extends _i1.Mock
    implements _i3.NetworkErrorHandler {
  MockNetworkErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Failure> handleNetworkException(Exception? exception) =>
      (super.noSuchMethod(
            Invocation.method(#handleNetworkException, [exception]),
            returnValue: _i5.Future<_i4.Failure>.value(
              _FakeFailure_3(
                this,
                Invocation.method(#handleNetworkException, [exception]),
              ),
            ),
          )
          as _i5.Future<_i4.Failure>);

  @override
  bool shouldGoOffline(_i4.Failure? failure) =>
      (super.noSuchMethod(
            Invocation.method(#shouldGoOffline, [failure]),
            returnValue: false,
          )
          as bool);

  @override
  Duration getNetworkRetryDelay(_i4.Failure? failure, int? attemptCount) =>
      (super.noSuchMethod(
            Invocation.method(#getNetworkRetryDelay, [failure, attemptCount]),
            returnValue: _FakeDuration_4(
              this,
              Invocation.method(#getNetworkRetryDelay, [failure, attemptCount]),
            ),
          )
          as Duration);

  @override
  _i4.RetryConfig createNetworkRetryConfig({
    int? maxAttempts = 3,
    Duration? initialDelay,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createNetworkRetryConfig, [], {
              #maxAttempts: maxAttempts,
              #initialDelay: initialDelay,
            }),
            returnValue: _FakeRetryConfig_5(
              this,
              Invocation.method(#createNetworkRetryConfig, [], {
                #maxAttempts: maxAttempts,
                #initialDelay: initialDelay,
              }),
            ),
          )
          as _i4.RetryConfig);

  @override
  _i5.Future<T> executeWithNetworkHandling<T>(
    _i5.Future<T> Function()? operation, {
    int? maxAttempts = 3,
    bool Function(_i4.Failure)? shouldRetry,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executeWithNetworkHandling,
              [operation],
              {#maxAttempts: maxAttempts, #shouldRetry: shouldRetry},
            ),
            returnValue:
                _i7.ifNotNull(
                  _i7.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #executeWithNetworkHandling,
                      [operation],
                      {#maxAttempts: maxAttempts, #shouldRetry: shouldRetry},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_6<T>(
                  this,
                  Invocation.method(
                    #executeWithNetworkHandling,
                    [operation],
                    {#maxAttempts: maxAttempts, #shouldRetry: shouldRetry},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<_i3.NetworkOperationResult<T>> executeWithEnhancedHandling<T>(
    _i5.Future<T> Function()? operation, {
    _i3.NetworkRetryConfig? config,
    bool Function(_i4.Failure)? shouldRetry,
    void Function(_i3.NetworkOperationEvent)? onEvent,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executeWithEnhancedHandling,
              [operation],
              {#config: config, #shouldRetry: shouldRetry, #onEvent: onEvent},
            ),
            returnValue: _i5.Future<_i3.NetworkOperationResult<T>>.value(
              _FakeNetworkOperationResult_7<T>(
                this,
                Invocation.method(
                  #executeWithEnhancedHandling,
                  [operation],
                  {
                    #config: config,
                    #shouldRetry: shouldRetry,
                    #onEvent: onEvent,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.NetworkOperationResult<T>>);

  @override
  _i5.Future<_i4.Failure> handleTimeoutError(
    _i4.TimeoutException? exception,
    Duration? timeoutDuration,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#handleTimeoutError, [
              exception,
              timeoutDuration,
            ]),
            returnValue: _i5.Future<_i4.Failure>.value(
              _FakeFailure_3(
                this,
                Invocation.method(#handleTimeoutError, [
                  exception,
                  timeoutDuration,
                ]),
              ),
            ),
          )
          as _i5.Future<_i4.Failure>);

  @override
  _i5.Future<_i4.Failure> handleConnectionError(Exception? exception) =>
      (super.noSuchMethod(
            Invocation.method(#handleConnectionError, [exception]),
            returnValue: _i5.Future<_i4.Failure>.value(
              _FakeFailure_3(
                this,
                Invocation.method(#handleConnectionError, [exception]),
              ),
            ),
          )
          as _i5.Future<_i4.Failure>);

  @override
  _i5.Future<_i3.NetworkRetryConfig> getAdaptiveRetryConfig() =>
      (super.noSuchMethod(
            Invocation.method(#getAdaptiveRetryConfig, []),
            returnValue: _i5.Future<_i3.NetworkRetryConfig>.value(
              _FakeNetworkRetryConfig_8(
                this,
                Invocation.method(#getAdaptiveRetryConfig, []),
              ),
            ),
          )
          as _i5.Future<_i3.NetworkRetryConfig>);
}

/// A class which mocks [OfflineManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineManager extends _i1.Mock implements _i3.OfflineManager {
  MockOfflineManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);

  @override
  _i5.Stream<_i3.OfflineState> get onOfflineStateChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onOfflineStateChanged),
            returnValue: _i5.Stream<_i3.OfflineState>.empty(),
          )
          as _i5.Stream<_i3.OfflineState>);

  @override
  _i5.Future<void> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool shouldShowOfflineIndicator() =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowOfflineIndicator, []),
            returnValue: false,
          )
          as bool);

  @override
  String getOfflineMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineMessage, []),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getOfflineMessage, []),
            ),
          )
          as String);

  @override
  bool shouldUseCachedData() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUseCachedData, []),
            returnValue: false,
          )
          as bool);

  @override
  bool shouldQueueOperation() =>
      (super.noSuchMethod(
            Invocation.method(#shouldQueueOperation, []),
            returnValue: false,
          )
          as bool);

  @override
  _i3.OfflineRetryStrategy getRetryStrategy() =>
      (super.noSuchMethod(
            Invocation.method(#getRetryStrategy, []),
            returnValue: _i3.OfflineRetryStrategy.immediate,
          )
          as _i3.OfflineRetryStrategy);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

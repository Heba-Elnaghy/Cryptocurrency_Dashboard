// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dashboard/test/unit/presentation/bloc/resource_cleanup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crypto_dashboard/domain/entities/entities.dart' as _i5;
import 'package:crypto_dashboard/domain/repositories/cryptocurrency_repository.dart'
    as _i2;
import 'package:crypto_dashboard/domain/usecases/get_initial_cryptocurrencies.dart'
    as _i3;
import 'package:crypto_dashboard/domain/usecases/manage_connection_lifecycle.dart'
    as _i7;
import 'package:crypto_dashboard/domain/usecases/subscribe_to_real_time_updates.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCryptocurrencyRepository_0 extends _i1.SmartFake
    implements _i2.CryptocurrencyRepository {
  _FakeCryptocurrencyRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetInitialCryptocurrencies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInitialCryptocurrencies extends _i1.Mock
    implements _i3.GetInitialCryptocurrencies {
  MockGetInitialCryptocurrencies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptocurrencyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptocurrencyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptocurrencyRepository);

  @override
  _i4.Future<List<_i5.Cryptocurrency>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Cryptocurrency>>.value(
              <_i5.Cryptocurrency>[],
            ),
          )
          as _i4.Future<List<_i5.Cryptocurrency>>);
}

/// A class which mocks [SubscribeToRealTimeUpdates].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeToRealTimeUpdates extends _i1.Mock
    implements _i6.SubscribeToRealTimeUpdates {
  MockSubscribeToRealTimeUpdates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptocurrencyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptocurrencyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptocurrencyRepository);

  @override
  _i4.Stream<_i6.CryptocurrencyUpdateEvent> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Stream<_i6.CryptocurrencyUpdateEvent>.empty(),
          )
          as _i4.Stream<_i6.CryptocurrencyUpdateEvent>);
}

/// A class which mocks [ManageConnectionLifecycle].
///
/// See the documentation for Mockito's code generation for more information.
class MockManageConnectionLifecycle extends _i1.Mock
    implements _i7.ManageConnectionLifecycle {
  MockManageConnectionLifecycle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptocurrencyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptocurrencyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptocurrencyRepository);

  @override
  bool get isUpdating =>
      (super.noSuchMethod(Invocation.getter(#isUpdating), returnValue: false)
          as bool);

  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);

  @override
  _i4.Future<void> startUpdates() =>
      (super.noSuchMethod(
            Invocation.method(#startUpdates, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopUpdates() =>
      (super.noSuchMethod(
            Invocation.method(#stopUpdates, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i5.ConnectionStatus> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: _i4.Stream<_i5.ConnectionStatus>.empty(),
          )
          as _i4.Stream<_i5.ConnectionStatus>);

  @override
  _i4.Stream<_i5.ConnectionStatus> startUpdatesWithReconnection() =>
      (super.noSuchMethod(
            Invocation.method(#startUpdatesWithReconnection, []),
            returnValue: _i4.Stream<_i5.ConnectionStatus>.empty(),
          )
          as _i4.Stream<_i5.ConnectionStatus>);

  @override
  _i4.Future<void> gracefulShutdown() =>
      (super.noSuchMethod(
            Invocation.method(#gracefulShutdown, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

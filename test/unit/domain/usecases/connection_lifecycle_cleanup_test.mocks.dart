// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dashboard/test/unit/domain/usecases/connection_lifecycle_cleanup_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:crypto_dashboard/domain/entities/entities.dart' as _i4;
import 'package:crypto_dashboard/domain/repositories/cryptocurrency_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CryptocurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptocurrencyRepository extends _i1.Mock
    implements _i2.CryptocurrencyRepository {
  MockCryptocurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUpdating =>
      (super.noSuchMethod(Invocation.getter(#isUpdating), returnValue: false)
          as bool);

  @override
  _i3.Future<List<_i4.Cryptocurrency>> getInitialCryptocurrencies() =>
      (super.noSuchMethod(
            Invocation.method(#getInitialCryptocurrencies, []),
            returnValue: _i3.Future<List<_i4.Cryptocurrency>>.value(
              <_i4.Cryptocurrency>[],
            ),
          )
          as _i3.Future<List<_i4.Cryptocurrency>>);

  @override
  _i3.Stream<_i4.PriceUpdateEvent> getPriceUpdates() =>
      (super.noSuchMethod(
            Invocation.method(#getPriceUpdates, []),
            returnValue: _i3.Stream<_i4.PriceUpdateEvent>.empty(),
          )
          as _i3.Stream<_i4.PriceUpdateEvent>);

  @override
  _i3.Stream<_i4.VolumeAlert> getVolumeAlerts() =>
      (super.noSuchMethod(
            Invocation.method(#getVolumeAlerts, []),
            returnValue: _i3.Stream<_i4.VolumeAlert>.empty(),
          )
          as _i3.Stream<_i4.VolumeAlert>);

  @override
  _i3.Stream<_i4.ConnectionStatus> getConnectionStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionStatus, []),
            returnValue: _i3.Stream<_i4.ConnectionStatus>.empty(),
          )
          as _i3.Stream<_i4.ConnectionStatus>);

  @override
  _i3.Future<void> startRealTimeUpdates() =>
      (super.noSuchMethod(
            Invocation.method(#startRealTimeUpdates, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> stopRealTimeUpdates() =>
      (super.noSuchMethod(
            Invocation.method(#stopRealTimeUpdates, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
